(ns metav.spit
  (:require [metav.display :refer [version module-name tag]]
            [metav.git :as git]
            [clojure.string :as string]
            [clojure.set :as set]
            [clojure.java.io :refer [file]]
            [clojure.tools.cli :refer [parse-opts]]
            [clojure.data.json :as json]
            [me.raynes.fs :as fs]))

(defn metadata-as-edn
  "return a map of the repo metadata: version, name, path, etc."
  [working-dir]
  (let [version (version working-dir)
        tag (tag working-dir version)]
    {:module-name (module-name working-dir)
     :tag tag
     :version (str version)
     :sha (git/last-sha working-dir)
     :committed-at (git/tag-timestamp working-dir (git/last-sha working-dir))
     :path (if-let [prefix (git/prefix working-dir)] prefix ".")}))

(defn metadata-as-code [working-dir ns]
  (let [{:keys [sha module-name path version tag committed-at]} (metadata-as-edn working-dir)]
    (string/join "\n" [";; This code was automatically generated by the 'metav' library."
                       (str "(ns " ns ")") ""
                       (format "(def sha \"%s\")" sha)
                       (format "(def module-name \"%s\")" module-name)
                       (format "(def path \"%s\")" path)
                       (format "(def version \"%s\")" version)
                       (format "(def tag \"%s\")" tag)
                       (format "(def committed-at \"%s\")" committed-at)
                       ""])))

(def accepted-formats #{"clj" "cljs" "cljc" "edn" "json"})

(defn parse-formats
  "parse a string of comma-separated formats a return a set of formats"
  [s]
  (when s (set (string/split s #","))))

(def cli-options
  [["-o" "--output-dir DIR_PATH" "Output Directory"
    :default "resources"
    :default-desc "resources"
    :parse-fn str]
   ["-n" "--namespace NS" "Namespace used in code output"
    :default "meta"]
   ["-f" "--formats FORMATS" "Comma-separated list of output formats (clj, cljc, cljs, edn, json)"
    :default "edn"
    :validate [#(empty? (set/difference (parse-formats %) accepted-formats)) "Formats must be in the following list: clj, cljc, cljs, edn, json"]
    ]
   ["-h" "--help"]])

(defn usage [summary]
  (->> ["The spit function of Metav output module's metadata in different files: clj, cljc, cljs, edn or json."
        "The metadata is composed of: module-name, tag, version, sha and path, timestamp of the last ref"
        ""
        "Usage: metav.spit [options]"
        ""
        "Options:"
        summary
        ""]
       (string/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with an error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (let [{:keys [options arguments errors summary] :as opts} (parse-opts args cli-options)]
    ;(prn opts)
    (cond
      (:help options) ; help => exit OK with usage summary
      {:exit-message (usage summary) :ok? true}

      errors ; errors => exit with description of errors
      {:exit-message (error-msg errors)}

      ;; custom validation on arguments
      (> (count options) 1)
      {:options options}

      (and (= 0 (count options)) (= 0 (count arguments)))
      {:exit-message (usage summary) :ok? false}

      :else ; failed custom validation => exit with usage summary
      {:exit-message (usage summary) :ok? false})))

(defn exit [status msg]
  (println msg)
  (System/exit status))



(defn metafile [output-dir namespace format]
  (fs/with-cwd output-dir
    (let [ns-file (fs/ns-path namespace)
          parent (fs/parent ns-file)
          name (fs/name ns-file)
          _ (fs/extension ns-file)]
      (fs/mkdirs parent)
      (file parent (str name "." format)))))

(defmulti spit-file :format)

(defmethod spit-file "edn" [{:keys [working-dir output-dir namespace format]}]
  (spit (metafile output-dir namespace format)
        (pr-str (metadata-as-edn working-dir ))))

(defmethod spit-file "json" [{:keys [working-dir output-dir namespace format]}]
  (spit (metafile output-dir namespace format)
        (json/write-str (metadata-as-edn working-dir ))))

(defmethod spit-file :default [{:keys [working-dir output-dir namespace format]}];default are cljs,clj and cljc
  (spit (metafile output-dir namespace format)
        (metadata-as-code working-dir namespace)))

(defn spit-files [working-dir requested-formats {:keys [namespace] :as options} exit-message]
  (doseq [format requested-formats]
    (if (accepted-formats format)
      (spit-file (merge options {:format format :working-dir working-dir}))
      (exit 1 exit-message))))

(defn -main
  ""
  [& args]
  (let [{:keys [options exit-message ok?] :as vargs} (validate-args args)
        {:keys [output-dir namespace formats]} options]
    (when exit-message
      (exit (if ok? 0 1) exit-message))
    (spit-files (str (git/pwd)) (parse-formats formats) options exit-message)
    (shutdown-agents)))
