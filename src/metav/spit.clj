(ns metav.spit
  (:require [metav.display :refer [version module-name tag]]
            [metav.git :as git]
            [clojure.string :as string]
            [clojure.java.io :refer [file]]
            [clojure.tools.cli :refer [parse-opts]]
            [clojure.data.json :as json]
            [me.raynes.fs :as fs]))

(defn metadata-edn
  "return a map of the repo metadata: version, name, path, etc."
  [working-dir tag version]
  (pr-str {:module-name (module-name working-dir)
           :tag tag
           :version (str version)
           :sha (git/last-sha working-dir)
           :path (if-let [prefix (git/prefix working-dir)] prefix ".")}))

(defn metadata-as-code [working-dir tag version ns]
  (string/join "\n" [(format ";; This code was automatically generated by the 'metav' library at %s" (System/currentTimeMillis))
                     (str "(ns " ns ")") ""
                     (format "(def sha \"%s\")" (git/last-sha working-dir))
                     (format "(def module-name \"%s\")" (module-name working-dir))
                     (format "(def path \"%s\")" (if-let [prefix (git/prefix working-dir)] prefix ".") )
                     (format "(def version \"%s\")" (str version))
                     (format "(def tag \"%s\")" tag)
                     (format "(def last-ref-at \"%s\")" (git/tag-timestamp working-dir (git/last-sha working-dir)))
                     ""]))

(defn metadata-json-str
  "returns a string of the repo metadata as JSON to be included in the message of the annotated tag"
  [working-dir tag version]
  (json/write-str (metadata-edn working-dir tag version)))

(def cli-options
  [["-o" "--output-dir DIR_PATH" "Output Directory"
    :default "resources"
    :default-desc "resources"
    :parse-fn str]
   ["-n" "--namespace NS" "Namespace used in code output"
    :default "meta"]
   ["-f" "--formats FORMATS" "Comma-separated list of output formats (clj, cljc, cljs, edn, json)"
    :default "edn"]
   ["-h" "--help"]])

(defn usage [options-summary]
  (->> ["The spit function of Metav output module's metadata in different files: clj, cljc, cljs, edn or json."
        "The metadata is composed of: module-name, tag, version, sha and path"
        ""
        "Usage: metav.spit [options]"
        ""
        "Options:"
        options-summary
        ""]
       (string/join \newline)))

(defn error-msg [errors]
  (str "The following errors occurred while parsing your command:\n\n"
       (string/join \newline errors)))

(defn validate-args
  "Validate command line arguments. Either return a map indicating the program
  should exit (with an error message, and optional ok status), or a map
  indicating the action the program should take and the options provided."
  [args]
  (prn (parse-opts args cli-options))
  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]
    (cond
      (:help options) ; help => exit OK with usage summary
      {:exit-message (usage summary) :ok? true}

      errors ; errors => exit with description of errors
      {:exit-message (error-msg errors)}

      ;; custom validation on arguments
      (> (count options) 1)
      {:options options}

      :else ; failed custom validation => exit with usage summary
      {:exit-message (usage summary)})))

(defn exit [status msg]
  (println msg)
  (System/exit status))

(def accepted-formats #{"clj" "cljs" "cljc" "edn" "json"})

(defn parse-formats
  "parse a string of comma-separated formats a return a set of formats"
  [s]
  (prn s)
  (when s (set (string/split s #","))))

(defn ns->path [ns]
  (clojure.string/replace ns "." "/"))

(defn metafile [output-dir namespace format]
  (fs/with-cwd output-dir
    (let [ns-file (fs/ns-path namespace)
          parent (fs/parent ns-file)
          name (fs/name ns-file)
          _ (fs/extension ns-file)]
      (fs/mkdirs parent)
      (let [f (file parent (str name "." format))]
        (fs/create f)
        f))))

(defmulti spit-file :format)

(defmethod spit-file "edn" [{:keys [working-dir tag version output-dir namespace format]}]
  (spit (metafile output-dir namespace format)
        (metadata-edn working-dir tag version)))

(defmethod spit-file "json" [{:keys [working-dir tag version  output-dir namespace format]}]
  (spit (metafile output-dir namespace format)
        (metadata-json-str working-dir tag version)))

(defmethod spit-file :default [{:keys [working-dir tag version  output-dir namespace format]}];default are cljs,clj and cljc
  (spit (metafile output-dir namespace format)
        (metadata-as-code working-dir tag version namespace)))

(defn spit-files [working-dir tag version requested-formats {:keys [namespace] :as options}]
  (doseq [format requested-formats]
    (spit-file (merge options {:format format :working-dir working-dir :tag tag :version version}))))

(defn -main
  ""
  [& args]
  (let [{:keys [options exit-message ok?]} (validate-args args)
        {:keys [output-dir namespace formats]} options
        _ (prn options)
        requested-formats (parse-formats formats)
        working-dir (str (git/pwd))
        version (version working-dir)
        tag (tag working-dir version)]
    (when exit-message
      (exit (if ok? 0 1) exit-message))
    (spit-files working-dir tag version requested-formats options)
    (shutdown-agents)
    ))
